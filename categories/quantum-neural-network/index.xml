<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quantum Neural Network on Quantum Machine Learning Tutorial</title>
    <link>https://qml-tutorial.github.io/categories/quantum-neural-network/</link>
    <description>Recent content in Quantum Neural Network on Quantum Machine Learning Tutorial</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://qml-tutorial.github.io/categories/quantum-neural-network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Quantum Classifier</title>
      <link>https://qml-tutorial.github.io/code/classifier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://qml-tutorial.github.io/code/classifier/</guid>
      <description>&lt;p&gt;In this tutorial, we show how to utilize QNN to handle discriminative tasks based on PennyLane library. Specifically, we aim to implement a quantum binary classifier for the Wine dataset. The primary pipeline includes following steps:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Load and preprocess the Wine dataset.&lt;/li&gt;&#xA;&lt;li&gt;Implement a quantum read-in protocol to load classical data into quantum states.&lt;/li&gt;&#xA;&lt;li&gt;Construct a parameterized quantum circuit model to process the input.&lt;/li&gt;&#xA;&lt;li&gt;Train the whole circuit and test.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;We begin by importing all related libraries:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Quantum Patch GAN</title>
      <link>https://qml-tutorial.github.io/code/patch-qgan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://qml-tutorial.github.io/code/patch-qgan/</guid>
      <description>&lt;p&gt;In this tutorial, we demonstrate how to implement a quantum patch GAN introduced in Chapter xxx for the generation of hand-written digit of five. The whole pipeline includes following steps:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Load and pre-process the dataset&lt;/li&gt;&#xA;&lt;li&gt;Build the classical discriminator&lt;/li&gt;&#xA;&lt;li&gt;Build the quantum generator&lt;/li&gt;&#xA;&lt;li&gt;Train the quantum patch GAN&lt;/li&gt;&#xA;&lt;li&gt;Visualize the generated images&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;We begin by importing required libraries:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; torch&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; torch.nn &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; nn&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; torch.optim &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; optim&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; torch.utils.data &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Dataset, DataLoader&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pennylane &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; qml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-1-dataset-preparation&#34;&gt;Step 1: Dataset Preparation&lt;/h2&gt;&#xA;&lt;p&gt;We will use the &lt;a href=&#34;https://archive.ics.uci.edu/dataset/80/optical+recognition+of+handwritten+digits&#34;&gt;Optical Recognition of Handwritten Digits dataset&lt;/a&gt;, where each data point represents an $8\times 8$ grayscale image. Letâ€™s start by defining a custom dataset class to load and process the data.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
